{'type': 'UNKNOWN', 'info': {}, 'indent': 0, 'line_no': 1}
{'type': 'UNKNOWN', 'info': {}, 'indent': 0, 'line_no': 2}
{'type': 'UNKNOWN', 'info': {}, 'indent': 0, 'line_no': 3}
{'type': 'UNKNOWN', 'info': {}, 'indent': 0, 'line_no': 4}
{'type': 'IGNORE', 'info': {'value': 'from typing import Any, Dict, List, Union'}, 'indent': 0, 'line_no': 5}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.constants.node_types import NodeType'}, 'indent': 0, 'line_no': 7}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.models.dg_node import DGNode'}, 'indent': 0, 'line_no': 8}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.models.node_connection import NodeConnection'}, 'indent': 0, 'line_no': 9}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.services.connections.condition_connection import ConditionConnector'}, 'indent': 0, 'line_no': 10}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.services.connections.def_connection import DefConnector'}, 'indent': 0, 'line_no': 11}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.services.connections.loop_connection import LoopConnection'}, 'indent': 0, 'line_no': 12}
{'type': 'IGNORE', 'info': {'value': 'from src.draw_graph.services.connections.return_connection import ReturnConnection'}, 'indent': 0, 'line_no': 13}
{'type': 'COMMENT', 'info': {'value': 'It takes a list of nodes, and returns a string of dot code'}, 'indent': 0, 'line_no': 16}
{'type': 'UNKNOWN', 'info': {}, 'indent': 0, 'line_no': 17}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'nodes: List[DGNode] = []'}, 'indent': 4, 'line_no': 18}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections: List[NodeConnection] = []'}, 'indent': 4, 'line_no': 19}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'tree = None'}, 'indent': 4, 'line_no': 20}
{'type': 'DEF', 'info': {'name': '__init__', 'args': ['self']}, 'indent': 4, 'line_no': 22}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'filtered_nodes = list(filter(lambda node: node.type != NodeType.COMMENT, nodes))'}, 'indent': 8, 'line_no': 23}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'self.__class__.nodes = filtered_nodes'}, 'indent': 8, 'line_no': 24}
{'type': 'UNKNOWN', 'info': {}, 'indent': 4, 'line_no': 26}
{'type': 'DEF', 'info': {'name': 'parse_relationship_tree', 'args': ['cls']}, 'indent': 4, 'line_no': 27}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 28}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 29}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 31}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 32}
{'type': 'LOOP', 'info': {'item': 'i', 'list': 'range(len(cls.nodes))'}, 'indent': 8, 'line_no': 33}
{'type': 'CONDITIONS', 'info': {'conditions': 'i > 0', 'value': 'i > 0', 'type': 'IF'}, 'indent': 12, 'line_no': 34}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_node = cls.nodes[i - 1]'}, 'indent': 16, 'line_no': 35}
{'type': 'CONDITIONS', 'info': {'conditions': 'i + 1 < len(cls.nodes)', 'value': 'i + 1 < len(cls.nodes)', 'type': 'IF'}, 'indent': 12, 'line_no': 36}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'cls.nodes[i].next_node = cls.nodes[i + 1]'}, 'indent': 16, 'line_no': 37}
{'type': 'LOOP', 'info': {'item': 'node', 'list': 'cls.nodes'}, 'indent': 8, 'line_no': 39}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'parent_node = cls._get_parent_node(node)'}, 'indent': 12, 'line_no': 40}
{'type': 'STATEMENT', 'info': {'type': 'METHOD', 'value': 'node.set_parent(parent_node)'}, 'indent': 12, 'line_no': 41}
{'type': 'LOOP', 'info': {'item': 'i', 'list': 'range(len(cls.nodes))'}, 'indent': 8, 'line_no': 43}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'cls.nodes[i].next_sibling = DGNode.get_next_sibling(cls.nodes[i])'}, 'indent': 12, 'line_no': 44}
{'type': 'LOOP', 'info': {'item': 'i', 'list': 'range(len(cls.nodes))'}, 'indent': 8, 'line_no': 46}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_sibling = DGNode.get_prev_sibling(cls.nodes[i])'}, 'indent': 12, 'line_no': 47}
{'type': 'UNKNOWN', 'info': {}, 'indent': 4, 'line_no': 49}
{'type': 'DEF', 'info': {'name': '_get_parent_node', 'args': ['cls']}, 'indent': 4, 'line_no': 50}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 51}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 52}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 53}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 55}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 56}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 57}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 58}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 59}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'parent_node = node.prev_node'}, 'indent': 8, 'line_no': 60}
{'type': 'CONDITIONS', 'info': {'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, 'indent': 8, 'line_no': 61}
{'type': 'RETURN', 'info': {'name': 'None'}, 'indent': 12, 'line_no': 62}
{'type': 'LOOP', 'info': {'item': 'node.indent', 'list': 'parent_node.indent'}, 'indent': 8, 'line_no': 63}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'parent_node = parent_node.prev_node'}, 'indent': 12, 'line_no': 64}
{'type': 'CONDITIONS', 'info': {'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, 'indent': 12, 'line_no': 65}
{'type': 'UNKNOWN', 'info': {}, 'indent': 16, 'line_no': 66}
{'type': 'RETURN', 'info': {'name': 'parent_node'}, 'indent': 8, 'line_no': 67}
{'type': 'UNKNOWN', 'info': {}, 'indent': 4, 'line_no': 69}
{'type': 'DEF', 'info': {'name': 'render', 'args': ['cls']}, 'indent': 4, 'line_no': 70}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 71}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 72}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 74}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 75}
{'type': 'UNKNOWN', 'info': {}, 'indent': 8, 'line_no': 76}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'result = ""'}, 'indent': 8, 'line_no': 77}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'node_connections = []'}, 'indent': 8, 'line_no': 78}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'def_indent = -1'}, 'indent': 8, 'line_no': 79}
{'type': 'LOOP', 'info': {'item': 'i,', 'list': 'in enumerate(cls.nodes)'}, 'indent': 8, 'line_no': 80}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'text = ""'}, 'indent': 12, 'line_no': 81}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections = None'}, 'indent': 12, 'line_no': 82}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'response = None'}, 'indent': 12, 'line_no': 83}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'out_def_method = node.indent <= def_indent'}, 'indent': 12, 'line_no': 84}
{'type': 'CONDITIONS', 'info': {'conditions': 'out_def_method', 'value': 'out_def_method', 'type': 'IF'}, 'indent': 12, 'line_no': 85}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'def_indent = -1'}, 'indent': 16, 'line_no': 86}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'text += "}\\n"'}, 'indent': 16, 'line_no': 87}
{'type': 'CONDITIONS', 'info': {'conditions': 'NodeType.is_definition(node)', 'value': 'NodeType.is_definition(node)', 'type': 'ELIF'}, 'indent': 12, 'line_no': 89}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'def_indent = node.indent'}, 'indent': 16, 'line_no': 90}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'handler = DefConnector(node)'}, 'indent': 16, 'line_no': 91}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': '_, text = handler.handle()'}, 'indent': 16, 'line_no': 92}
{'type': 'CONDITIONS', 'info': {'conditions': 'NodeType.is_loop(node)', 'value': 'NodeType.is_loop(node)', 'type': 'ELIF'}, 'indent': 12, 'line_no': 94}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'handler = LoopConnection(node)'}, 'indent': 16, 'line_no': 95}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections, _ = handler.handle()'}, 'indent': 16, 'line_no': 96}
{'type': 'CONDITIONS', 'info': {'conditions': 'NodeType.is_end(node)', 'value': 'NodeType.is_end(node)', 'type': 'ELIF'}, 'indent': 12, 'line_no': 98}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections = ['}, 'indent': 16, 'line_no': 99}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'NodeConnection(node.prev_node, node, source="@prev_to_end")'}, 'indent': 20, 'line_no': 100}
{'type': 'UNKNOWN', 'info': {}, 'indent': 16, 'line_no': 101}
{'type': 'CONDITIONS', 'info': {'conditions': 'NodeType.is_condition(node)', 'value': 'NodeType.is_condition(node)', 'type': 'ELIF'}, 'indent': 12, 'line_no': 103}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'handler = ConditionConnector(node)'}, 'indent': 16, 'line_no': 104}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections, _ = handler.handle()'}, 'indent': 16, 'line_no': 105}
{'type': 'CONDITIONS', 'info': {'conditions': 'node.prev_node and node.prev_node.indent == node.indent', 'value': 'node.prev_node and node.prev_node.indent == node.indent', 'type': 'ELIF'}, 'indent': 12, 'line_no': 107}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections = ['}, 'indent': 16, 'line_no': 108}
{'type': 'STATEMENT', 'info': {'type': 'METHOD', 'value': 'NodeConnection('}, 'indent': 20, 'line_no': 109}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'node.prev_node, node, source="@prev_to_current_same_indent"'}, 'indent': 24, 'line_no': 110}
{'type': 'UNKNOWN', 'info': {}, 'indent': 20, 'line_no': 111}
{'type': 'UNKNOWN', 'info': {}, 'indent': 16, 'line_no': 112}
{'type': 'CONDITIONS', 'info': {'conditions': 'NodeType.is_return(node)', 'value': 'NodeType.is_return(node)', 'type': 'ELIF'}, 'indent': 12, 'line_no': 114}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'response = ReturnConnection.handle(node=node, end_node=cls.nodes[-1])'}, 'indent': 16, 'line_no': 115}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections = response.get("connections", [])'}, 'indent': 16, 'line_no': 116}
{'type': 'CONDITIONS', 'info': {'conditions': 'node.parent and cls.nodes[i - 1] == node.parent', 'value': 'node.parent and cls.nodes[i - 1] == node.parent', 'type': 'ELIF'}, 'indent': 12, 'line_no': 118}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'connections = ['}, 'indent': 16, 'line_no': 119}
{'type': 'STATEMENT', 'info': {'type': 'METHOD', 'value': 'NodeConnection('}, 'indent': 20, 'line_no': 120}
{'type': 'UNKNOWN', 'info': {}, 'indent': 24, 'line_no': 121}
{'type': 'UNKNOWN', 'info': {}, 'indent': 24, 'line_no': 122}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'label="True",'}, 'indent': 24, 'line_no': 123}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'source="@parent_to_child",'}, 'indent': 24, 'line_no': 124}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'color="green",'}, 'indent': 24, 'line_no': 125}
{'type': 'UNKNOWN', 'info': {}, 'indent': 20, 'line_no': 126}
{'type': 'UNKNOWN', 'info': {}, 'indent': 16, 'line_no': 127}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'result += text or ""'}, 'indent': 12, 'line_no': 129}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'result += cls.extract_text_from_connections(connections, response)'}, 'indent': 12, 'line_no': 130}
{'type': 'CONDITIONS', 'info': {'conditions': 'connections', 'value': 'connections', 'type': 'IF'}, 'indent': 12, 'line_no': 131}
{'type': 'STATEMENT', 'info': {'type': 'METHOD', 'value': 'node_connections.extend(connections)'}, 'indent': 16, 'line_no': 132}
{'type': 'CONDITIONS', 'info': {'conditions': 'def_indent != -1', 'value': 'def_indent != -1', 'type': 'IF'}, 'indent': 8, 'line_no': 133}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'result += "}"'}, 'indent': 12, 'line_no': 134}
{'type': 'RETURN', 'info': {'name': 'dict(text=result, node_connections=node_connections)'}, 'indent': 8, 'line_no': 135}
{'type': 'UNKNOWN', 'info': {}, 'indent': 4, 'line_no': 137}
{'type': 'DEF', 'info': {'name': 'extract_text_from_connections', 'args': ['cls']}, 'indent': 4, 'line_no': 138}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'text = response["text"] + "\\n" if response else ""'}, 'indent': 8, 'line_no': 139}
{'type': 'CONDITIONS', 'info': {'conditions': 'not connections', 'value': 'not connections', 'type': 'IF'}, 'indent': 8, 'line_no': 140}
{'type': 'RETURN', 'info': {'name': '""'}, 'indent': 12, 'line_no': 141}
{'type': 'STATEMENT', 'info': {'type': 'ASSIGN', 'value': 'text += "\\n".join([connection.to_dot() for connection in connections])'}, 'indent': 8, 'line_no': 142}
{'type': 'RETURN', 'info': {'name': 'text'}, 'indent': 8, 'line_no': 143}

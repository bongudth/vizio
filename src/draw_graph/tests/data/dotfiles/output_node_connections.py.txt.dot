digraph my_graph {
bgcolor="white"
L0 [shape=ellipse] [label="Start"] [type="START"] [style=filled fillcolor="#0B2447" fontcolor=white]
L18 [shape=rect] [label="nodes: List[DGNode] = []
connections: List[NodeConnection] = []
tree = None
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]

L23 [shape=rect] [label="filtered_nodes = list(filter(lambda node: node.type != NodeType.COMMENT, nodes))
self.__class__.nodes = filtered_nodes
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]

L33 [shape=rect] [label="Loop i in range(len(cls.nodes))"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L34 [shape=diamond] [label="i > 0"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L35 [shape=rect] [label="cls.nodes[i].prev_node = cls.nodes[i - 1]
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L36 [shape=diamond] [label="i + 1 < len(cls.nodes)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L37 [shape=rect] [label="cls.nodes[i].next_node = cls.nodes[i + 1]
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L39 [shape=rect] [label="Loop node in cls.nodes"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L40 [shape=rect] [label="parent_node = cls._get_parent_node(node)
node.set_parent(parent_node)
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L43 [shape=rect] [label="Loop i in range(len(cls.nodes))"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L44 [shape=rect] [label="cls.nodes[i].next_sibling = DGNode.get_next_sibling(cls.nodes[i])
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L46 [shape=rect] [label="Loop i in range(len(cls.nodes))"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L47 [shape=rect] [label="cls.nodes[i].prev_sibling = DGNode.get_prev_sibling(cls.nodes[i])
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]

L60 [shape=rect] [label="parent_node = node.prev_node
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L61 [shape=diamond] [label="not parent_node"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L62 [shape=ellipse] [label="None"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L63 [shape=rect] [label="Loop node.indent in parent_node.indent"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L64 [shape=rect] [label="parent_node = parent_node.prev_node
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L65 [shape=diamond] [label="not parent_node"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L67 [shape=ellipse] [label="parent_node"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]

L77 [shape=rect] [label="result = ''
node_connections = []
def_indent = -1
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L80 [shape=rect] [label="Loop i, in in enumerate(cls.nodes)"] [type="LOOP"] [style=filled fillcolor="#6D67E4" fontcolor=white]
L81 [shape=rect] [label="text = ''
connections = None
response = None
out_def_method = node.indent <= def_indent
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L85 [shape=diamond] [label="out_def_method"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L86 [shape=rect] [label="def_indent = -1
text += '}\n'
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L89 [shape=diamond] [label="NodeType.is_definition(node)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L90 [shape=rect] [label="def_indent = node.indent
handler = DefConnector(node)
_, text = handler.handle()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L94 [shape=diamond] [label="NodeType.is_loop(node)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L95 [shape=rect] [label="handler = LoopConnection(node)
connections, _ = handler.handle()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L98 [shape=diamond] [label="NodeType.is_end(node)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L99 [shape=rect] [label="connections = [
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L100 [shape=rect] [label="NodeConnection(node.prev_node, node, source='@prev_to_end')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L103 [shape=diamond] [label="NodeType.is_condition(node)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L104 [shape=rect] [label="handler = ConditionConnector(node)
connections, _ = handler.handle()
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L107 [shape=diamond] [label="node.prev_node and node.prev_node.indent == node.indent"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L108 [shape=rect] [label="connections = [
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L109 [shape=rect] [label="NodeConnection(
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L110 [shape=rect] [label="node.prev_node, node, source='@prev_to_current_same_indent'
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L114 [shape=diamond] [label="NodeType.is_return(node)"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L115 [shape=rect] [label="response = ReturnConnection.handle(node=node, end_node=cls.nodes[-1])
connections = response.get('connections', [])
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L118 [shape=diamond] [label="node.parent and cls.nodes[i - 1] == node.parent"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L119 [shape=rect] [label="connections = [
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L120 [shape=rect] [label="NodeConnection(
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L123 [shape=rect] [label="label='True',
source='@parent_to_child',
color='green',
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L129 [shape=rect] [label="result += text or ''
result += cls.extract_text_from_connections(connections, response)
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L131 [shape=diamond] [label="connections"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L132 [shape=rect] [label="node_connections.extend(connections)
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L133 [shape=diamond] [label="def_indent != -1"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L134 [shape=rect] [label="result += '}'
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L135 [shape=ellipse] [label="dict(text=result, node_connections=node_connections)"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]

L139 [shape=rect] [label="text = response['text'] + '\n' if response else ''
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L140 [shape=diamond] [label="not connections"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L141 [shape=ellipse] [label="''"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L142 [shape=rect] [label="text += '\n'.join([connection.to_dot() for connection in connections])
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L143 [shape=ellipse] [label="text"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L0 [shape=ellipse] [label="End"] [type="END"] [style=filled fillcolor="#F45050" fontcolor=white]
4386766800 -> L5   [source="@prev_to_current_same_indent : {} -> ACNode(_info={'value': 'from typing import Any, Dict, List, Union'}, _type='IGNORE', _indent=0, _line_no=5)"]
L5 -> L7   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from typing import Any, Dict, List, Union'}, _type='IGNORE', _indent=0, _line_no=5) -> ACNode(_info={'value': 'from src.draw_graph.constants.node_types import NodeType'}, _type='IGNORE', _indent=0, _line_no=7)"]
L7 -> L8   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.constants.node_types import NodeType'}, _type='IGNORE', _indent=0, _line_no=7) -> ACNode(_info={'value': 'from src.draw_graph.models.dg_node import DGNode'}, _type='IGNORE', _indent=0, _line_no=8)"]
L8 -> L9   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.models.dg_node import DGNode'}, _type='IGNORE', _indent=0, _line_no=8) -> ACNode(_info={'value': 'from src.draw_graph.models.node_connection import NodeConnection'}, _type='IGNORE', _indent=0, _line_no=9)"]
L9 -> L10   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.models.node_connection import NodeConnection'}, _type='IGNORE', _indent=0, _line_no=9) -> ACNode(_info={'value': 'from src.draw_graph.services.connections.condition_connection import ConditionConnector'}, _type='IGNORE', _indent=0, _line_no=10)"]
L10 -> L11   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.services.connections.condition_connection import ConditionConnector'}, _type='IGNORE', _indent=0, _line_no=10) -> ACNode(_info={'value': 'from src.draw_graph.services.connections.def_connection import DefConnector'}, _type='IGNORE', _indent=0, _line_no=11)"]
L11 -> L12   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.services.connections.def_connection import DefConnector'}, _type='IGNORE', _indent=0, _line_no=11) -> ACNode(_info={'value': 'from src.draw_graph.services.connections.loop_connection import LoopConnection'}, _type='IGNORE', _indent=0, _line_no=12)"]
L12 -> L13   [source="@prev_to_current_same_indent : ACNode(_info={'value': 'from src.draw_graph.services.connections.loop_connection import LoopConnection'}, _type='IGNORE', _indent=0, _line_no=12) -> ACNode(_info={'value': 'from src.draw_graph.services.connections.return_connection import ReturnConnection'}, _type='IGNORE', _indent=0, _line_no=13)"]
L13 -> L18 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'value': 'from src.draw_graph.services.connections.return_connection import ReturnConnection'}, _type='IGNORE', _indent=0, _line_no=13) -> ACNode(_info={'type': 'ASSIGN', 'value': 'nodes: List[DGNode] = []\nconnections: List[NodeConnection] = []\ntree = None\n'}, _type='STATEMENT', _indent=4, _line_no=18)"]
subgraph cluster___init__ {
label = "__init__";

}
L33 -> L39 [color=red] [label=out] [source="@loop_to_next : ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=33) -> ACNode(_info={'item': 'node', 'list': 'cls.nodes'}, _type='LOOP', _indent=8, _line_no=39)"]
L33 -> L34   [source="@if_to_prev_node : ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=33) -> ACNode(_info={'conditions': 'i > 0', 'value': 'i > 0', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=34)"]
L35 -> L33   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_node = cls.nodes[i - 1]\n'}, _type='STATEMENT', _indent=16, _line_no=35) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=33)"]
L34 -> L35 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'i > 0', 'value': 'i > 0', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=34) -> ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_node = cls.nodes[i - 1]\n'}, _type='STATEMENT', _indent=16, _line_no=35)"]
L35 -> L36   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_node = cls.nodes[i - 1]\n'}, _type='STATEMENT', _indent=16, _line_no=35) -> ACNode(_info={'conditions': 'i + 1 < len(cls.nodes)', 'value': 'i + 1 < len(cls.nodes)', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=36)"]
L37 -> L33   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].next_node = cls.nodes[i + 1]\n'}, _type='STATEMENT', _indent=16, _line_no=37) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=33)"]
L36 -> L37 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'i + 1 < len(cls.nodes)', 'value': 'i + 1 < len(cls.nodes)', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=36) -> ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].next_node = cls.nodes[i + 1]\n'}, _type='STATEMENT', _indent=16, _line_no=37)"]
L37 -> L39   [source="@prev_to_loop : ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].next_node = cls.nodes[i + 1]\n'}, _type='STATEMENT', _indent=16, _line_no=37) -> ACNode(_info={'item': 'node', 'list': 'cls.nodes'}, _type='LOOP', _indent=8, _line_no=39)"]
L39 -> L43 [color=red] [label=out] [source="@loop_to_next : ACNode(_info={'item': 'node', 'list': 'cls.nodes'}, _type='LOOP', _indent=8, _line_no=39) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=43)"]
L39 -> L40 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'item': 'node', 'list': 'cls.nodes'}, _type='LOOP', _indent=8, _line_no=39) -> ACNode(_info={'type': 'ASSIGN', 'value': 'parent_node = cls._get_parent_node(node)\nnode.set_parent(parent_node)\n'}, _type='STATEMENT', _indent=12, _line_no=40)"]
L40 -> L43   [source="@prev_to_loop : ACNode(_info={'type': 'ASSIGN', 'value': 'parent_node = cls._get_parent_node(node)\nnode.set_parent(parent_node)\n'}, _type='STATEMENT', _indent=12, _line_no=40) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=43)"]
L43 -> L46 [color=red] [label=out] [source="@loop_to_next : ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=43) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=46)"]
L43 -> L44 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=43) -> ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].next_sibling = DGNode.get_next_sibling(cls.nodes[i])\n'}, _type='STATEMENT', _indent=12, _line_no=44)"]
L44 -> L46   [source="@prev_to_loop : ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].next_sibling = DGNode.get_next_sibling(cls.nodes[i])\n'}, _type='STATEMENT', _indent=12, _line_no=44) -> ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=46)"]

L46 -> L47 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'item': 'i', 'list': 'range(len(cls.nodes))'}, _type='LOOP', _indent=8, _line_no=46) -> ACNode(_info={'type': 'ASSIGN', 'value': 'cls.nodes[i].prev_sibling = DGNode.get_prev_sibling(cls.nodes[i])\n'}, _type='STATEMENT', _indent=12, _line_no=47)"]
subgraph cluster__get_parent_node {
label = "_get_parent_node";

L60 -> L61   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'parent_node = node.prev_node\n'}, _type='STATEMENT', _indent=8, _line_no=60) -> ACNode(_info={'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=61)"]
L61 -> L63 [color=red]  [source="@if_to_next_sibling : ACNode(_info={'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=61) -> ACNode(_info={'item': 'node.indent', 'list': 'parent_node.indent'}, _type='LOOP', _indent=8, _line_no=63)"]
{rank=same; L61; L62;}
L62 -> 4386797456   [source="@return_to_end : ACNode(_info={'name': 'None'}, _type='RETURN', _indent=12, _line_no=62) -> {}"]
L61 -> L62  [label=True] [source="@return_2 : ACNode(_info={'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=61) -> ACNode(_info={'name': 'None'}, _type='RETURN', _indent=12, _line_no=62)"]
L62 -> L63   [source="@prev_to_loop : ACNode(_info={'name': 'None'}, _type='RETURN', _indent=12, _line_no=62) -> ACNode(_info={'item': 'node.indent', 'list': 'parent_node.indent'}, _type='LOOP', _indent=8, _line_no=63)"]
L63 -> L67 [color=red] [label=out] [source="@loop_to_next : ACNode(_info={'item': 'node.indent', 'list': 'parent_node.indent'}, _type='LOOP', _indent=8, _line_no=63) -> ACNode(_info={'name': 'parent_node'}, _type='RETURN', _indent=8, _line_no=67)"]
L63 -> L64 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'item': 'node.indent', 'list': 'parent_node.indent'}, _type='LOOP', _indent=8, _line_no=63) -> ACNode(_info={'type': 'ASSIGN', 'value': 'parent_node = parent_node.prev_node\n'}, _type='STATEMENT', _indent=12, _line_no=64)"]
L64 -> L65   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'parent_node = parent_node.prev_node\n'}, _type='STATEMENT', _indent=12, _line_no=64) -> ACNode(_info={'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=65)"]
L65 -> L63   [source="@last_child_to_next_sibling : ACNode(_info={'conditions': 'not parent_node', 'value': 'not parent_node', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=65) -> ACNode(_info={'item': 'node.indent', 'list': 'parent_node.indent'}, _type='LOOP', _indent=8, _line_no=63)"]
{rank=same; L65; L67;}
L67 -> 4386797456   [source="@return_to_end : ACNode(_info={'name': 'parent_node'}, _type='RETURN', _indent=8, _line_no=67) -> {}"]
}
L77 -> L80   [source="@prev_to_loop : ACNode(_info={'type': 'ASSIGN', 'value': 'result = ''\nnode_connections = []\ndef_indent = -1\n'}, _type='STATEMENT', _indent=8, _line_no=77) -> ACNode(_info={'item': 'i,', 'list': 'in enumerate(cls.nodes)'}, _type='LOOP', _indent=8, _line_no=80)"]
L80 -> L133 [color=red] [label=out] [source="@loop_to_next : ACNode(_info={'item': 'i,', 'list': 'in enumerate(cls.nodes)'}, _type='LOOP', _indent=8, _line_no=80) -> ACNode(_info={'conditions': 'def_indent != -1', 'value': 'def_indent != -1', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=133)"]
L80 -> L81 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'item': 'i,', 'list': 'in enumerate(cls.nodes)'}, _type='LOOP', _indent=8, _line_no=80) -> ACNode(_info={'type': 'ASSIGN', 'value': 'text = ''\nconnections = None\nresponse = None\nout_def_method = node.indent <= def_indent\n'}, _type='STATEMENT', _indent=12, _line_no=81)"]
L81 -> L85   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'text = ''\nconnections = None\nresponse = None\nout_def_method = node.indent <= def_indent\n'}, _type='STATEMENT', _indent=12, _line_no=81) -> ACNode(_info={'conditions': 'out_def_method', 'value': 'out_def_method', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=85)"]
L85 -> L89 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'out_def_method', 'value': 'out_def_method', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=85) -> ACNode(_info={'conditions': 'NodeType.is_definition(node)', 'value': 'NodeType.is_definition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=89)"]
L89 -> L94 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'NodeType.is_definition(node)', 'value': 'NodeType.is_definition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=89) -> ACNode(_info={'conditions': 'NodeType.is_loop(node)', 'value': 'NodeType.is_loop(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=94)"]
L94 -> L98 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'NodeType.is_loop(node)', 'value': 'NodeType.is_loop(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=94) -> ACNode(_info={'conditions': 'NodeType.is_end(node)', 'value': 'NodeType.is_end(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=98)"]
L98 -> L103 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'NodeType.is_end(node)', 'value': 'NodeType.is_end(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=98) -> ACNode(_info={'conditions': 'NodeType.is_condition(node)', 'value': 'NodeType.is_condition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=103)"]
L103 -> L107 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'NodeType.is_condition(node)', 'value': 'NodeType.is_condition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=103) -> ACNode(_info={'conditions': 'node.prev_node and node.prev_node.indent == node.indent', 'value': 'node.prev_node and node.prev_node.indent == node.indent', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=107)"]
L107 -> L114 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'node.prev_node and node.prev_node.indent == node.indent', 'value': 'node.prev_node and node.prev_node.indent == node.indent', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=107) -> ACNode(_info={'conditions': 'NodeType.is_return(node)', 'value': 'NodeType.is_return(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=114)"]
L114 -> L118 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'NodeType.is_return(node)', 'value': 'NodeType.is_return(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=114) -> ACNode(_info={'conditions': 'node.parent and cls.nodes[i - 1] == node.parent', 'value': 'node.parent and cls.nodes[i - 1] == node.parent', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=118)"]
L86 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'def_indent = -1\ntext += '}\\n'\n'}, _type='STATEMENT', _indent=16, _line_no=86) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L85 -> L86 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'out_def_method', 'value': 'out_def_method', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=85) -> ACNode(_info={'type': 'ASSIGN', 'value': 'def_indent = -1\ntext += '}\\n'\n'}, _type='STATEMENT', _indent=16, _line_no=86)"]
L90 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'def_indent = node.indent\nhandler = DefConnector(node)\n_, text = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=90) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L89 -> L90 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'NodeType.is_definition(node)', 'value': 'NodeType.is_definition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=89) -> ACNode(_info={'type': 'ASSIGN', 'value': 'def_indent = node.indent\nhandler = DefConnector(node)\n_, text = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=90)"]
L95 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'handler = LoopConnection(node)\nconnections, _ = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=95) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L94 -> L95 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'NodeType.is_loop(node)', 'value': 'NodeType.is_loop(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=94) -> ACNode(_info={'type': 'ASSIGN', 'value': 'handler = LoopConnection(node)\nconnections, _ = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=95)"]
L100 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(node.prev_node, node, source='@prev_to_end')\n'}, _type='STATEMENT', _indent=20, _line_no=100) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L98 -> L99 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'NodeType.is_end(node)', 'value': 'NodeType.is_end(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=98) -> ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=99)"]
L99 -> L100 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=99) -> ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(node.prev_node, node, source='@prev_to_end')\n'}, _type='STATEMENT', _indent=20, _line_no=100)"]
L104 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'handler = ConditionConnector(node)\nconnections, _ = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=104) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L103 -> L104 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'NodeType.is_condition(node)', 'value': 'NodeType.is_condition(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=103) -> ACNode(_info={'type': 'ASSIGN', 'value': 'handler = ConditionConnector(node)\nconnections, _ = handler.handle()\n'}, _type='STATEMENT', _indent=16, _line_no=104)"]
L110 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'node.prev_node, node, source='@prev_to_current_same_indent'\n'}, _type='STATEMENT', _indent=24, _line_no=110) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L107 -> L108 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'node.prev_node and node.prev_node.indent == node.indent', 'value': 'node.prev_node and node.prev_node.indent == node.indent', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=107) -> ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=108)"]
L108 -> L109 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=108) -> ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(\n'}, _type='STATEMENT', _indent=20, _line_no=109)"]
L109 -> L110 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(\n'}, _type='STATEMENT', _indent=20, _line_no=109) -> ACNode(_info={'type': 'ASSIGN', 'value': 'node.prev_node, node, source='@prev_to_current_same_indent'\n'}, _type='STATEMENT', _indent=24, _line_no=110)"]
L115 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'response = ReturnConnection.handle(node=node, end_node=cls.nodes[-1])\nconnections = response.get('connections', [])\n'}, _type='STATEMENT', _indent=16, _line_no=115) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L114 -> L115 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'NodeType.is_return(node)', 'value': 'NodeType.is_return(node)', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=114) -> ACNode(_info={'type': 'ASSIGN', 'value': 'response = ReturnConnection.handle(node=node, end_node=cls.nodes[-1])\nconnections = response.get('connections', [])\n'}, _type='STATEMENT', _indent=16, _line_no=115)"]
L123 -> L129   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'label='True',\nsource='@parent_to_child',\ncolor='green',\n'}, _type='STATEMENT', _indent=24, _line_no=123) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129)"]
L118 -> L119 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'node.parent and cls.nodes[i - 1] == node.parent', 'value': 'node.parent and cls.nodes[i - 1] == node.parent', 'type': 'ELIF'}, _type='CONDITIONS', _indent=12, _line_no=118) -> ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=119)"]
L119 -> L120 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'type': 'ASSIGN', 'value': 'connections = [\n'}, _type='STATEMENT', _indent=16, _line_no=119) -> ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(\n'}, _type='STATEMENT', _indent=20, _line_no=120)"]
L120 -> L123 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'type': 'ASSIGN', 'value': 'NodeConnection(\n'}, _type='STATEMENT', _indent=20, _line_no=120) -> ACNode(_info={'type': 'ASSIGN', 'value': 'label='True',\nsource='@parent_to_child',\ncolor='green',\n'}, _type='STATEMENT', _indent=24, _line_no=123)"]
L129 -> L131   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'result += text or ''\nresult += cls.extract_text_from_connections(connections, response)\n'}, _type='STATEMENT', _indent=12, _line_no=129) -> ACNode(_info={'conditions': 'connections', 'value': 'connections', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=131)"]
L132 -> L80   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'node_connections.extend(connections)\n'}, _type='STATEMENT', _indent=16, _line_no=132) -> ACNode(_info={'item': 'i,', 'list': 'in enumerate(cls.nodes)'}, _type='LOOP', _indent=8, _line_no=80)"]
L131 -> L132 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'connections', 'value': 'connections', 'type': 'IF'}, _type='CONDITIONS', _indent=12, _line_no=131) -> ACNode(_info={'type': 'ASSIGN', 'value': 'node_connections.extend(connections)\n'}, _type='STATEMENT', _indent=16, _line_no=132)"]
L132 -> L133   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'node_connections.extend(connections)\n'}, _type='STATEMENT', _indent=16, _line_no=132) -> ACNode(_info={'conditions': 'def_indent != -1', 'value': 'def_indent != -1', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=133)"]
L133 -> L135 [color=red]  [source="@if_to_next_sibling : ACNode(_info={'conditions': 'def_indent != -1', 'value': 'def_indent != -1', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=133) -> ACNode(_info={'name': 'dict(text=result, node_connections=node_connections)'}, _type='RETURN', _indent=8, _line_no=135)"]
L134 -> L135   [source="@last_child_to_next_sibling : ACNode(_info={'type': 'ASSIGN', 'value': 'result += '}'\n'}, _type='STATEMENT', _indent=12, _line_no=134) -> ACNode(_info={'name': 'dict(text=result, node_connections=node_connections)'}, _type='RETURN', _indent=8, _line_no=135)"]
L133 -> L134 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'def_indent != -1', 'value': 'def_indent != -1', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=133) -> ACNode(_info={'type': 'ASSIGN', 'value': 'result += '}'\n'}, _type='STATEMENT', _indent=12, _line_no=134)"]
{rank=same; L134; L135;}
L135 -> 4386797456   [source="@return_to_end : ACNode(_info={'name': 'dict(text=result, node_connections=node_connections)'}, _type='RETURN', _indent=8, _line_no=135) -> {}"]
subgraph cluster_extract_text_from_connections {
label = "extract_text_from_connections";

L139 -> L140   [source="@if_to_prev_node : ACNode(_info={'type': 'ASSIGN', 'value': 'text = response['text'] + '\\n' if response else ''\n'}, _type='STATEMENT', _indent=8, _line_no=139) -> ACNode(_info={'conditions': 'not connections', 'value': 'not connections', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=140)"]
L140 -> L142 [color=red]  [source="@if_to_next_sibling : ACNode(_info={'conditions': 'not connections', 'value': 'not connections', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=140) -> ACNode(_info={'type': 'ASSIGN', 'value': 'text += '\\n'.join([connection.to_dot() for connection in connections])\n'}, _type='STATEMENT', _indent=8, _line_no=142)"]
{rank=same; L140; L141;}
L141 -> 4386797456   [source="@return_to_end : ACNode(_info={'name': ''''}, _type='RETURN', _indent=12, _line_no=141) -> {}"]
L140 -> L141  [label=True] [source="@return_2 : ACNode(_info={'conditions': 'not connections', 'value': 'not connections', 'type': 'IF'}, _type='CONDITIONS', _indent=8, _line_no=140) -> ACNode(_info={'name': ''''}, _type='RETURN', _indent=12, _line_no=141)"]
L142 -> L143   [source="@prev_to_current_same_indent : ACNode(_info={'type': 'ASSIGN', 'value': 'text += '\\n'.join([connection.to_dot() for connection in connections])\n'}, _type='STATEMENT', _indent=8, _line_no=142) -> ACNode(_info={'name': 'text'}, _type='RETURN', _indent=8, _line_no=143)"]
}
}
digraph my_graph {
bgcolor="white"
L0 [shape=ellipse] [label="Start"] [type="START"] [style=filled fillcolor="#0B2447" fontcolor=white]

L5 [shape=diamond] [label="n < 0"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L6 [shape=rect] [label="print('Incorrect input')
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L10 [shape=diamond] [label="n == 0"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L11 [shape=ellipse] [label="0"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L15 [shape=diamond] [label="n == 1 or n == 2"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
L16 [shape=ellipse] [label="1"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]

L19 [shape=ellipse] [label="fibonacci(n - 1) + fibonacci(n - 2)"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
L23 [shape=rect] [label="print(fibonacci(9))
"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
L0 [shape=ellipse] [label="End"] [type="END"] [style=filled fillcolor="#F45050" fontcolor=white]
subgraph cluster_fibonacci {
label = "fibonacci";

L5 -> L10 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'n < 0', 'value': 'n < 0', 'type': 'IF'}, _type='CONDITIONS', _indent=4, _line_no=5) -> ACNode(_info={'conditions': 'n == 0', 'value': 'n == 0', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=10)"]
L10 -> L15 [color=red] [label=elif] [source="@if_or_if_to_elif : ACNode(_info={'conditions': 'n == 0', 'value': 'n == 0', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=10) -> ACNode(_info={'conditions': 'n == 1 or n == 2', 'value': 'n == 1 or n == 2', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=15)"]

L5 -> L6 [color=green] [label=True] [source="@parent_to_child : ACNode(_info={'conditions': 'n < 0', 'value': 'n < 0', 'type': 'IF'}, _type='CONDITIONS', _indent=4, _line_no=5) -> ACNode(_info={'type': 'ASSIGN', 'value': 'print('Incorrect input')\n'}, _type='STATEMENT', _indent=8, _line_no=6)"]
{rank=same; L10; L11;}
L11 -> 4317888080   [source="@return_to_end : ACNode(_info={'name': '0'}, _type='RETURN', _indent=8, _line_no=11) -> {}"]
L10 -> L11  [label=True] [source="@return_2 : ACNode(_info={'conditions': 'n == 0', 'value': 'n == 0', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=10) -> ACNode(_info={'name': '0'}, _type='RETURN', _indent=8, _line_no=11)"]
{rank=same; L15; L16;}
L16 -> 4317888080   [source="@return_to_end : ACNode(_info={'name': '1'}, _type='RETURN', _indent=8, _line_no=16) -> {}"]
L15 -> L16  [label=True] [source="@return_2 : ACNode(_info={'conditions': 'n == 1 or n == 2', 'value': 'n == 1 or n == 2', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=15) -> ACNode(_info={'name': '1'}, _type='RETURN', _indent=8, _line_no=16)"]
L15 -> L19  [label=else] [source=" : ACNode(_info={'conditions': 'n == 1 or n == 2', 'value': 'n == 1 or n == 2', 'type': 'ELIF'}, _type='CONDITIONS', _indent=4, _line_no=15) -> ACNode(_info={'name': 'fibonacci(n - 1) + fibonacci(n - 2)'}, _type='RETURN', _indent=8, _line_no=19)"]
{rank=same; L19;}
L19 -> 4317888080   [source="@return_to_end : ACNode(_info={'name': 'fibonacci(n - 1) + fibonacci(n - 2)'}, _type='RETURN', _indent=8, _line_no=19) -> {}"]

}L23 -> 4317888080   [source="@prev_to_end : ACNode(_info={'type': 'ASSIGN', 'value': 'print(fibonacci(9))\n'}, _type='STATEMENT', _indent=0, _line_no=23) -> {}"]

}

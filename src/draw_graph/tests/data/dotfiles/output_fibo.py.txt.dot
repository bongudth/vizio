digraph my_graph {
bgcolor="white"
139896611563088 [shape=ellipse] [label="Start"] [type="START"] [style=filled fillcolor="#0B2447" fontcolor=white]
139896611566256
139896611567840 [shape=diamond] [label="n < 0"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
139896611569088 [shape=parallelogram] [label="print('Incorrect input')"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
139896611568368 [shape=diamond] [label="n == 0"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
139896611568992 [shape=ellipse] [label="0"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
139896611565872 [shape=diamond] [label="n == 1 or n == 2"] [type="CONDITIONS"] [style=filled fillcolor="#ECB365" fontcolor=black]
139896611566640 [shape=ellipse] [label="1"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]

139896611565632 [shape=ellipse] [label="fibonacci(n - 1) + fibonacci(n - 2)"] [type="RETURN"] [style=filled fillcolor="#BAD7E9" fontcolor=black]
139896611565200 [shape=parallelogram] [label="print(fibonacci(9))"] [type="STATEMENT"] [style=filled fillcolor="#FFC6D3" fontcolor=black]
139896611569040 [shape=ellipse] [label="End"] [type="END"] [style=filled fillcolor="#F45050" fontcolor=white]
subgraph cluster_fibonacci {
label = "fibonacci";
139896611566256 -> 139896611567840  [source = "@if_to_prev_node : ACNode(info={'name': 'fibonacci', 'args': ['n']}, type=DEF, indent=0) ===> ACNode(info={'conditions': ['n < 0'], 'type': 'IF'}, type=CONDITIONS, indent=4)"] ;

139896611567840 -> 139896611568368 [label = elif] [source = "@if_or_if_to_elif : ACNode(info={'conditions': ['n < 0'], 'type': 'IF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'conditions': ['n == 0'], 'type': 'ELIF'}, type=CONDITIONS, indent=4)"] [color=red];

139896611568368 -> 139896611565872 [label = elif] [source = "@if_or_if_to_elif : ACNode(info={'conditions': ['n == 0'], 'type': 'ELIF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'conditions': ['n == 1 or n == 2'], 'type': 'ELIF'}, type=CONDITIONS, indent=4)"] [color=red];

139896611569088 -> 139896611566256  [source = "@last_child_to_next_sibling : ACNode(info={'type': 'StatementType.STATEMENT_METHOD', 'value': 'print('Incorrect input')'}, type=STATEMENT, indent=8) ===> ACNode(info={'name': 'fibonacci', 'args': ['n']}, type=DEF, indent=0)"] ;
139896611567840 -> 139896611569088 [label = True] [source = "@parent_to_child : ACNode(info={'conditions': ['n < 0'], 'type': 'IF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'type': 'StatementType.STATEMENT_METHOD', 'value': 'print('Incorrect input')'}, type=STATEMENT, indent=8)"] [color=green];
{rank = same; 139896611568368; 139896611568992;}

139896611568992 -> 139896611569040  [source = "@return_to_end : ACNode(info={'name': '0'}, type=RETURN, indent=8) ===> {}"] ;

139896611568368 -> 139896611568992 [label = True] [source = "@return_2 : ACNode(info={'conditions': ['n == 0'], 'type': 'ELIF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'name': '0'}, type=RETURN, indent=8)"] ;
{rank = same; 139896611565872; 139896611566640;}

139896611566640 -> 139896611569040  [source = "@return_to_end : ACNode(info={'name': '1'}, type=RETURN, indent=8) ===> {}"] ;

139896611565872 -> 139896611566640 [label = True] [source = "@return_2 : ACNode(info={'conditions': ['n == 1 or n == 2'], 'type': 'ELIF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'name': '1'}, type=RETURN, indent=8)"] ;
139896611565872 -> 139896611565632 [label = else] [source = " : ACNode(info={'conditions': ['n == 1 or n == 2'], 'type': 'ELIF'}, type=CONDITIONS, indent=4) ===> ACNode(info={'name': 'fibonacci(n - 1) + fibonacci(n - 2)'}, type=RETURN, indent=8)"] ;
{rank = same; 139896611565632;}

139896611565632 -> 139896611569040  [source = "@return_to_end : ACNode(info={'name': 'fibonacci(n - 1) + fibonacci(n - 2)'}, type=RETURN, indent=8) ===> {}"] ;

}139896611565200 -> 139896611569040  [source = "@prev_to_end : ACNode(info={'type': 'StatementType.STATEMENT_METHOD', 'value': 'print(fibonacci(9))'}, type=STATEMENT, indent=0) ===> {}"] ;

}
